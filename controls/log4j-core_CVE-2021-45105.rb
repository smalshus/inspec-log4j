# Scan for .jar/.war in combined operation to prevent multiple scans
if os[:platform][:family] == 'windows'
  files_to_scan = command('[System.IO.DriveInfo]::GetDrives() | Where-Object -Property DriveType -eq Fixed | foreach { (Get-ChildItem $_.Name -Include "log4j-core*.jar", "*.war" -Recurse -ErrorAction SilentlyContinue).FullName }').stdout.split(/\r?\n/)
else
  files_to_scan = command("df -lP | awk {'if (NR!=1) print $6'} | xargs -I FILESYSTEM find FILESYSTEM -xdev -name 'log4j-core*.jar' -o -name '*.war'").stdout.split(/\r?\n/)
end

jars_to_scan = files_to_scan.select{|e| File.extname(e)=='.jar'}.uniq
wars_to_scan = files_to_scan.select{|e| File.extname(e)=='.war'}.uniq

control 'log4j-core-versions CVE-2021-45105' do
  impact 0.5
  title 'Log4j Core JARs should be 2.17.0 or higher'
  desc 'Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3'

  tag cve: 'CVE-2021-45105'
  ref 'CVE-2021-45105', url: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105'

  jars_to_scan.each do |path|
    describe jar_file(path: path) do
      its('version') { should be >= JarVersion.new('2.17.0') }
    end
  end
end


control 'log4j-war-files' do
  impact 1.0
  title 'Log4j Core JARs embedded in WAR files'
  desc 'Log4j Core JARs vulnerable to CVE-2021-45105 may be packaged in WAR files. Vulnerable versions are defined as older than 2.17.0'

  tag cve: 'CVE-2021-45105'
  ref 'CVE-2021-45105', url: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105'

  wars_to_scan.each do |path|
    describe war_file_jar(path: path, jar: 'log4j-core') do
      if described_class.jar
        its('jar.version') { should be >= JarVersion.new('2.17.0') }
      else
        its('jar') { should be nil }
      end
    end
  end
end
